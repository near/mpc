name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
  merge_group:

jobs:
  docker-build: 
    name: "Build Docker image"
    runs-on: warp-ubuntu-2204-x64-2x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: git submodule update --init --recursive
      
      - name: Build MPC Docker image
        uses: Warpbuilds/build-push-action@v6
        with:
          context: .
          profile-name: "mpc-image-builder"
          file: deployment/Dockerfile-gcp

  ci-tests:
    name: "Run tests"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Cache Rust dependencies
        uses: WarpBuilds/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Run Clippy fmt
        run: |
          CARGO_TARGET_DIR="target/clippy" \
          RUSTFLAGS="-D warnings" \
          cargo clippy --all-features --all-targets --locked

          cd devnet
          CARGO_TARGET_DIR="target/clippy" \
          RUSTFLAGS="-D warnings" \
          cargo clippy --all-features --all-targets --locked
          cd ..

          cd libs/chain-signatures
          CARGO_TARGET_DIR="target/clippy" \
          RUSTFLAGS="-D warnings" \
          cargo clippy --all-features --all-targets --locked
          cd ../..

      - name: Run Cargo fmt
        run: |
          cargo fmt -- --check

          cd devnet
          cargo fmt -- --check
          cd ..

          cd libs/chain-signatures
          cargo fmt -- --check
          cd ../..

      - name: Install cargo-nextest
        run: cargo install cargo-nextest

      - name: Install wasm-opt from crates.io
        run: |
          cargo install wasm-opt --locked
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install cargo-near
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev
          cargo install cargo-near

      - name: Run cargo-nextest
        run: cargo nextest run --release --locked --all-features

      - name: Run contract tests
        run: |
          cd libs/chain-signatures
          cargo nextest run -p mpc-contract --release --locked

      - name: Download near core binary from S3
        id: download-neard
        continue-on-error: true
        run: |
          os=$(uname)
          arch=$(uname -m)
          os_and_arch=${os}-${arch}
          cd libs/nearcore

          branch_name=$(git branch -r --contains HEAD | grep -o 'origin/[^ ]*' | sed 's|origin/||' | head -n 1 || echo "no-branch")
          commit_hash=$(git rev-parse HEAD || echo "no-commit")

          url="https://s3.us-west-1.amazonaws.com/build.nearprotocol.com/nearcore/${os_and_arch}/${branch_name}/${commit_hash}/neard"

          mkdir -p target/release
          status_code=$(curl -v -o target/release/neard -w "%{http_code}" "${url}")
          if [ "$status_code" -ne 200 ]; then
            echo "curl failed with URL: ${url}, Status Code: ${status_code}"
            exit 1
          fi
          chmod +x target/release/neard

      - name: Build near core as fallback
        if: steps.download-neard.outcome != 'success'
        run: |
          cd libs/nearcore
          cargo build -p neard --release

      - name: Build mpc node
        run: cargo build -p mpc-node --release --features=network-hardship-simulation

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup virtualenv
        run: |
          python3 -m venv pytest/venv
          source pytest/venv/bin/activate
          cd pytest
          pip install -r requirements.txt

      - name: Run pytest
        run: |
          source pytest/venv/bin/activate
          cd pytest 
          pytest -m "not ci_excluded" -s -x

  tee-launcher-tests:
    name: "Run TEE Launcher pytests"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup virtualenv
        run: |
          python3 -m venv tee_launcher/venv
          source tee_launcher/venv/bin/activate
          cd tee_launcher 
          pip install -r requirements.txt

      - name: Run pytest
        run: |
          source tee_launcher/venv/bin/activate
          cd tee_launcher 
          PYTHONPATH=. pytest -vsx
