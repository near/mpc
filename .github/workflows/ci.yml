name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
  merge_group:

jobs:
  docker-build:
    name: "Build Docker image"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Build MPC Docker image
        uses: Warpbuilds/build-push-action@v6
        with:
          context: .
          profile-name: "mpc-image-builder"
          file: deployment/Dockerfile-mpc
          tags: test_image_tag_ci
          load: true

      - name: Check Docker image can initialize and start
        run: |
          touch /tmp/image-digest.bin
          # Test container startup - fail if container can't start
          # Start container in background and check status after 60 seconds
          CONTAINER_ID=$(docker run -d \
          -v /tmp/:/data \
          -e MPC_HOME_DIR="/data" \
          -e MPC_ACCOUNT_ID=test_image.near \
          -e RUST_BACKTRACE="full" \
          -e RUST_LOG="mpc=debug,info" \
          -e MPC_SECRET_STORE_KEY=BD399143F5B3126098B0EAA023A0E730 \
          -e MPC_P2P_PRIVATE_KEY=ed25519:2WBi5gRyJntYA7dCyddiwNV2yNTdr5uZhrP4WX5GNBL5DSVCSR7ESvcXF2DBfY5oPYhzBmHnguPVSXjr6UCi8h1g \
          -e MPC_ACCOUNT_SK=ed25519:6X3Bnghdf89WjHQfHDFYjW2UeNaNqCQ1AUGxX7zgvbJT4KSoeXzuHEdux6A2jsphTZTmS4SUGQRyYqC2ik3UrMP \
          -e NEAR_BOOT_NODES=ed25519:ERguu7jQuYk8pxNsRC6FdezvNsegBPva1GRGqjmtD7i2@10.10.10.10:24567 \
          -e MPC_CONTRACT_ID=v1.signer_test \
          -e MPC_IMAGE_HASH=5ba283860c0efa3d4c3e08a76a2b77fab4725baad4f48504eac858e04af7fd64 \
          -e MPC_LATEST_ALLOWED_HASH_FILE=/tmp/image-digest.bin \
          -e MPC_ENV=mainnet test_image_tag_ci)
          
          if [ -z "$CONTAINER_ID" ]; then
            echo "❌ Failed to start container"
            exit 1
          fi
          
          echo "Container started: $CONTAINER_ID"
          
          # Check if container is actually running
          sleep 60
          if [ -z "$(docker ps --filter "id=$CONTAINER_ID" --format "{{.ID}}")" ]; then
            docker logs "$CONTAINER_ID" 2>&1 | head -50
            echo "❌ Container cannot initialize/start properly"
            exit 1
          fi
          
          echo "✅ Container started successfully"

  clippy-mpc-node:
    name: "MPC Node: clippy and format"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Cache Rust dependencies
        uses: WarpBuilds/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Run Clippy fmt
        run: |
          CARGO_TARGET_DIR="target/clippy" \
          RUSTFLAGS="-D warnings" \
          cargo clippy --all-targets --locked

      - name: Run Cargo fmt
        run: |
          cargo fmt -- --check

  clippy-mpc-node-all-features:
    name: "MPC Node (all features): clippy and format"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Cache Rust dependencies
        uses: WarpBuilds/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Run Clippy fmt
        run: |
          CARGO_TARGET_DIR="target/clippy" \
          RUSTFLAGS="-D warnings" \
          cargo clippy --all-targets --all-features --locked

      - name: Run Cargo fmt
        run: |
          cargo fmt -- --check

  clippy-mpc-contract:
    name: "MPC Contract: clippy and format"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Cache Rust dependencies
        uses: WarpBuilds/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Run Clippy fmt
        run: |
          cd libs/chain-signatures
          CARGO_TARGET_DIR="target/clippy" \
          RUSTFLAGS="-D warnings" \
          cargo clippy --all-features --all-targets --locked

      - name: Run Cargo fmt
        run: |
          cd libs/chain-signatures
          cargo fmt -- --check

  clippy-mpc-devnet:
    name: "MPC Devnet: clippy and format"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Cache Rust dependencies
        uses: WarpBuilds/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Run Clippy fmt
        run: |
          cd devnet
          CARGO_TARGET_DIR="target/clippy" \
          RUSTFLAGS="-D warnings" \
          cargo clippy --all-features --all-targets --locked

      - name: Run Cargo fmt
        run: |
          cd devnet
          cargo fmt -- --check

  mpc-unittests:
    name: "MPC Node: unittests"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Cache Rust dependencies
        uses: WarpBuilds/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Install cargo-nextest
        run: cargo install cargo-nextest

      - name: Run cargo-nextest
        run: cargo nextest run --release --locked

  mpc-contract-unittests:
    name: "MPC Contract: unittests"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: WarpBuilds/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Install cargo-nextest
        run: cargo install cargo-nextest

      - name: Install wasm-opt from crates.io
        run: |
          cargo install wasm-opt --locked
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      - name: Run contract tests
        run: |
          cd libs/chain-signatures
          cargo nextest run -p mpc-contract --release --locked

  mpc-pytests:
    name: "MPC Node: pytests"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Cache Rust dependencies
        uses: WarpBuilds/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Download near core binary from S3
        id: download-neard
        continue-on-error: true
        run: |
          os=$(uname)
          arch=$(uname -m)
          os_and_arch=${os}-${arch}
          cd libs/nearcore

          branch_name=$(git branch -r --contains HEAD | grep -o 'origin/[^ ]*' | sed 's|origin/||' | head -n 1 || echo "no-branch")
          commit_hash=$(git rev-parse HEAD || echo "no-commit")

          url="https://s3.us-west-1.amazonaws.com/build.nearprotocol.com/nearcore/${os_and_arch}/${branch_name}/${commit_hash}/neard"

          mkdir -p target/release
          status_code=$(curl -v -o target/release/neard -w "%{http_code}" "${url}")
          if [ "$status_code" -ne 200 ]; then
            echo "curl failed with URL: ${url}, Status Code: ${status_code}"
            exit 1
          fi
          chmod +x target/release/neard

      - name: Build near core as fallback
        if: steps.download-neard.outcome != 'success'
        run: |
          cd libs/nearcore
          cargo build -p neard --release

      - name: Build mpc node
        run: cargo build -p mpc-node --release --features=network-hardship-simulation

      - name: Install cargo-near
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev
          cargo install cargo-near --locked
      
      - name: Install wasm-opt from crates.io
        run: |
          cargo install wasm-opt --locked
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup virtualenv
        run: |
          python3 -m venv pytest/venv
          source pytest/venv/bin/activate
          cd pytest
          pip install -r requirements.txt
          cd ../
          git submodule foreach --recursive 'git reset --hard && git clean -fd'

      - name: Run pytest
        run: |
          source pytest/venv/bin/activate
          cd pytest 
          pytest -m "not ci_excluded" -s -x

  tee-launcher-tests:
    name: "TEE Launcher: pytests"
    runs-on: warp-ubuntu-2204-x64-8x
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup virtualenv
        run: |
          python3 -m venv tee_launcher/venv
          source tee_launcher/venv/bin/activate
          cd tee_launcher 
          pip install -r requirements.txt

      - name: Run pytest
        run: |
          source tee_launcher/venv/bin/activate
          cd tee_launcher 
          PYTHONPATH=. pytest -vsx
