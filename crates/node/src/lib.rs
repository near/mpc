#![deny(clippy::mod_module_files)]
// Include build information generated by the built crate
pub mod built_info {
    include!(concat!(env!("OUT_DIR"), "/built.rs"));
}

use std::sync::LazyLock;

pub static MPC_VERSION_STRING: LazyLock<String> = LazyLock::new(|| {
    format!(
        "mpc-node {}\n(release {}) (build_time {}) (commit {}) ({})",
        built_info::PKG_VERSION,
        built_info::PKG_VERSION,
        built_info::BUILT_TIME_UTC,
        built_info::GIT_COMMIT_HASH_SHORT.unwrap_or("unknown"),
        built_info::RUSTC_VERSION,
    )
});

mod assets;
#[cfg(test)]
mod async_testing;
mod background;
pub mod cli;
mod config;
mod coordinator;
mod db;
mod indexer;
mod key_events;
pub mod keyshare;
pub mod metrics;
pub mod migration_service;
mod mpc_client;
mod network;
pub mod p2p;
pub mod primitives;
mod protocol;
mod protocol_version;
mod providers;
pub mod requests;
mod runtime;
mod storage;
pub mod tracing;
mod tracking;
pub mod types;
pub mod web;

pub(crate) mod trait_extensions;

mod tee;
#[cfg(any(test, feature = "test-utils"))]
pub mod test_utils;
#[cfg(test)]
mod tests;
