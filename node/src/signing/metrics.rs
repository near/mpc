use lazy_static::lazy_static;
use prometheus::{exponential_buckets, linear_buckets};

lazy_static! {
    pub static ref MPC_PENDING_SIGNATURES_QUEUE_SIZE: prometheus::IntGauge =
        prometheus::register_int_gauge!(
            "mpc_pending_signatures_queue_size",
            "Number of pending signature requests in the queue"
        )
        .unwrap();
    pub static ref MPC_PENDING_SIGNATURES_QUEUE_BLOCKS_INDEXED: prometheus::IntCounter =
        prometheus::register_int_counter!(
            "mpc_pending_signatures_queue_blocks_indexed",
            "Number of blocks indexed by the pending signatures queue"
        )
        .unwrap();
    pub static ref MPC_PENDING_SIGNATURES_QUEUE_FINALIZED_BLOCKS_INDEXED: prometheus::IntCounter =
        prometheus::register_int_counter!(
            "mpc_pending_signatures_queue_finalized_blocks_indexed",
            "Number of finalized blocks indexed by the pending signatures queue"
        )
        .unwrap();
    pub static ref MPC_PENDING_SIGNATURES_QUEUE_REQUESTS_INDEXED: prometheus::IntCounter =
        prometheus::register_int_counter!(
            "mpc_pending_signatures_queue_requests_indexed",
            "Number of signature requests indexed by the pending signatures queue"
        )
        .unwrap();
    pub static ref MPC_PENDING_SIGNATURES_QUEUE_RESPONSES_INDEXED: prometheus::IntCounter =
        prometheus::register_int_counter!(
            "mpc_pending_signatures_queue_responses_indexed",
            "Number of signature responses indexed by the pending signatures queue"
        )
        .unwrap();
    pub static ref MPC_PENDING_SIGNATURES_QUEUE_MATCHING_RESPONSES_INDEXED: prometheus::IntCounter =
        prometheus::register_int_counter!(
            "mpc_pending_signatures_queue_matching_responses_indexed",
            "Number of signature responses that match previously indexed signature requests,
                 indexed by the pending signatures queue"
        )
        .unwrap();

    pub static ref MPC_PENDING_SIGNATURES_QUEUE_ATTEMPTS_GENERATED: prometheus::IntCounter =
        prometheus::register_int_counter!(
            "mpc_pending_signatures_queue_attempts_generated",
            "Number of attempts generated by the pending signatures queue to compute a signature as the leader"
        )
        .unwrap();

    pub static ref SIGNATURE_REQUEST_RESPONSE_LATENCY_BLOCKS: prometheus::Histogram = {
        // High resolution for 1-9 blocks
        let mut buckets = linear_buckets(1.0, 1.0, 9).unwrap();
        // 10, 15, 22.5, 33.75, 50, ..., 256, 384
        let exponential_buckets  = exponential_buckets(10.0, 1.5, 91).unwrap();
        buckets.extend(exponential_buckets);

        prometheus::register_histogram!(
            "mpc_signature_request_response_latency_blocks",
            "The number of blocks between when a signature request is seen and when the corresponding response is seen.",
            buckets).
            unwrap()

    };

    pub static ref SIGNATURE_REQUEST_RESPONSE_LATENCY_SECONDS: prometheus::Histogram =
        prometheus::register_histogram!(
            "mpc_signature_request_response_latency_seconds",
            "The duration, in seconds, between when a signature request is seen and when the corresponding response is seen.",
            // 2s - 3s - 4.5s .... - 115s
            exponential_buckets(2.0, 1.5, 10).unwrap()
            ).unwrap();

    pub static ref MPC_CLUSTER_FAILED_SIGNATURES_COUNT: prometheus::IntCounterVec =
        prometheus::register_int_counter_vec!(
            "mpc_cluster_failed_signatures_count",
            "Number of failed or severely delayed signatures in the cluster",
            &["reason"]
        )
        .unwrap();
}
