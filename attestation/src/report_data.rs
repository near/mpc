use derive_more::Constructor;
use near_crypto::PublicKey;
use sha3::{Digest, Sha3_384};

/// Number of bytes for the report data.
const REPORT_DATA_SIZE: usize = 64;

/// Common constants for all [`ReportData`] versions.
const BINARY_VERSION_OFFSET: usize = 0;
const BINARY_VERSION_SIZE: usize = 2;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u16)]
pub enum BinaryVersion {
    V1 = 1,
}

impl BinaryVersion {
    pub fn to_be_bytes(self) -> [u8; BINARY_VERSION_SIZE] {
        (self as u16).to_be_bytes()
    }

    pub fn from_be_bytes(bytes: [u8; BINARY_VERSION_SIZE]) -> Option<Self> {
        match u16::from_be_bytes(bytes) {
            1 => Some(Self::V1),
            _ => None,
        }
    }
}

#[derive(Debug, Clone, Constructor)]
pub struct ReportDataV1 {
    tls_public_key: PublicKey,
    account_public_key: PublicKey,
}

/// report_data_v1: [u8; 64] =
///   [version(2 bytes big endian) || sha384(TLS pub key || account pub key) || zero padding]
impl ReportDataV1 {
    /// V1-specific format constants
    const PUBLIC_KEYS_OFFSET: usize = BINARY_VERSION_OFFSET + BINARY_VERSION_SIZE;
    const PUBLIC_KEYS_HASH_SIZE: usize = 48;

    // Compile-time assertions for V1 format.
    const _V1_LAYOUT_CHECK: () = {
        assert!(
            BINARY_VERSION_SIZE + Self::PUBLIC_KEYS_HASH_SIZE <= REPORT_DATA_SIZE,
            "V1: Version and public key must not exceed report data size."
        );
    };

    /// Generates the binary representation of V1 report data.
    pub fn to_bytes(&self) -> [u8; REPORT_DATA_SIZE] {
        let mut report_data = [0u8; REPORT_DATA_SIZE];

        // Copy binary version (2 bytes, big endian)
        let version_bytes = BinaryVersion::V1.to_be_bytes();
        report_data[BINARY_VERSION_OFFSET..BINARY_VERSION_OFFSET + BINARY_VERSION_SIZE]
            .copy_from_slice(&version_bytes);

        // Generate and copy hash of public keys
        let public_keys_hash = self.public_keys_hash();
        report_data
            [Self::PUBLIC_KEYS_OFFSET..Self::PUBLIC_KEYS_OFFSET + Self::PUBLIC_KEYS_HASH_SIZE]
            .copy_from_slice(&public_keys_hash);

        // Remaining bytes are already zero-padded by default
        report_data
    }

    /// Parses V1 report data from bytes. Returns the hash of public keys.
    /// Note: This only extracts the hash, not the original public keys.
    pub fn from_bytes(bytes: &[u8; REPORT_DATA_SIZE]) -> [u8; Self::PUBLIC_KEYS_HASH_SIZE] {
        // Extract hash using V1 format
        let mut hash = [0u8; Self::PUBLIC_KEYS_HASH_SIZE];
        hash.copy_from_slice(
            &bytes
                [Self::PUBLIC_KEYS_OFFSET..Self::PUBLIC_KEYS_OFFSET + Self::PUBLIC_KEYS_HASH_SIZE],
        );
        hash
    }

    /// Generates SHA3-384 hash of concatenated TLS and account public keys.
    fn public_keys_hash(&self) -> [u8; Self::PUBLIC_KEYS_HASH_SIZE] {
        let mut hasher = Sha3_384::new();
        hasher.update(self.tls_public_key.key_data());
        hasher.update(self.account_public_key.key_data());
        hasher.finalize().into()
    }
}

#[derive(Debug, Clone)]
pub enum ReportData {
    V1(ReportDataV1),
}

impl ReportData {
    pub fn version(&self) -> BinaryVersion {
        match self {
            ReportData::V1(_) => BinaryVersion::V1,
        }
    }

    /// Generates the binary representation of report data.
    pub fn to_bytes(&self) -> [u8; REPORT_DATA_SIZE] {
        match self {
            ReportData::V1(v1) => v1.to_bytes(),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::{quote::Quote, report_data::ReportData};
    use near_crypto::{KeyType, SecretKey};

    #[test]
    fn test_from_str_valid() {
        const VALID_QUOTE_HEX: &str = "";
        let quote: Quote = VALID_QUOTE_HEX.parse().unwrap();

        let td_report = quote.report.as_td10().expect("Should be a TD 1.0 report");

        let expected_rtmr3 = [
            0x90, 0x5f, 0x81, 0x71, 0x7d, 0x9, 0x5f, 0x14, 0xf5, 0x94, 0x47, 0xed, 0xff, 0xe3,
            0x3e, 0x1e, 0x3c, 0xe4, 0x85, 0xda, 0xaa, 0x95, 0x3a, 0xc6, 0xfe, 0xb8, 0x21, 0x7f,
            0xc6, 0x5a, 0x3d, 0x50, 0xb2, 0x96, 0x2e, 0x41, 0x15, 0xe, 0xb8, 0x53, 0x3b, 0xda,
            0xbe, 0xb2, 0x35, 0x49, 0x31, 0x34,
        ];
        assert_eq!(td_report.rt_mr3, expected_rtmr3,);

        let near_p2p_public_key: PublicKey = "ed25519:29tEkzF4Xk1V62xow8zCJi9HXyUob8oZPwTaKviXFMjZ"
            .parse()
            .unwrap();
        let near_signer_public_key: PublicKey =
            "ed25519:BWoViHSCBKD9dSxg3s5juQnhQWfyPE2SAdUdrbJGoCLJ"
                .parse()
                .unwrap();
        let report_data = ReportData::V1(ReportDataV1::new(
            near_p2p_public_key,
            near_signer_public_key,
        ));
        assert_eq!(report_data.to_bytes(), td_report.report_data,);
    }

    fn create_test_keys() -> (PublicKey, PublicKey) {
        let tls_secret = SecretKey::from_seed(KeyType::ED25519, "test_tls_seed");
        let account_secret = SecretKey::from_seed(KeyType::ED25519, "test_account_seed");
        (tls_secret.public_key(), account_secret.public_key())
    }

    #[test]
    fn test_binary_version_serialization() {
        let version = BinaryVersion::V1;
        assert_eq!(version.to_be_bytes(), [0, 1]);

        let parsed = BinaryVersion::from_be_bytes([0, 1]).unwrap();
        assert_eq!(parsed, BinaryVersion::V1);

        assert!(BinaryVersion::from_be_bytes([0, 2]).is_none());
    }

    #[test]
    fn test_report_data_enum_structure() {
        let (tls_key, account_key) = create_test_keys();
        let data = ReportData::V1(ReportDataV1::new(tls_key.clone(), account_key.clone()));

        match &data {
            ReportData::V1(v1) => {
                assert_eq!(&v1.tls_public_key, &tls_key);
                assert_eq!(&v1.account_public_key, &account_key);
            }
        }

        assert_eq!(data.version(), BinaryVersion::V1);
    }

    #[test]
    fn test_report_data_v1_struct() {
        let (tls_key, account_key) = create_test_keys();

        let v1 = ReportDataV1::new(tls_key.clone(), account_key.clone());
        assert_eq!(v1.tls_public_key, tls_key);
        assert_eq!(v1.account_public_key, account_key);
    }

    #[test]
    fn test_from_bytes() {
        let (tls_key, account_key) = create_test_keys();
        let report_data_v1 = ReportDataV1::new(tls_key, account_key);
        let bytes = report_data_v1.to_bytes();

        let hash = ReportDataV1::from_bytes(&bytes);
        assert_eq!(hash, report_data_v1.public_keys_hash());

        let report_data = ReportData::V1(report_data_v1);
        assert_eq!(report_data.to_bytes(), bytes);
    }

    #[test]
    fn test_binary_version_placement() {
        let (tls_key, account_key) = create_test_keys();
        let bytes = ReportDataV1::new(tls_key, account_key).to_bytes();

        let version_bytes =
            &bytes[BINARY_VERSION_OFFSET..BINARY_VERSION_OFFSET + BINARY_VERSION_SIZE];
        assert_eq!(version_bytes, &[0, 1]);
    }

    #[test]
    fn test_public_key_hash_placement() {
        let (tls_key, account_key) = create_test_keys();
        let report_data_v1 = ReportDataV1::new(tls_key.clone(), account_key.clone());
        let bytes = report_data_v1.to_bytes();

        let report_data = ReportData::V1(report_data_v1);
        assert_eq!(report_data.to_bytes(), bytes);

        let hash_bytes = &bytes[ReportDataV1::PUBLIC_KEYS_OFFSET
            ..ReportDataV1::PUBLIC_KEYS_OFFSET + ReportDataV1::PUBLIC_KEYS_HASH_SIZE];
        assert_ne!(hash_bytes, &[0u8; ReportDataV1::PUBLIC_KEYS_HASH_SIZE]);

        let mut hasher = Sha3_384::new();
        hasher.update(tls_key.key_data());
        hasher.update(account_key.key_data());
        let expected: [u8; ReportDataV1::PUBLIC_KEYS_HASH_SIZE] = hasher.finalize().into();

        assert_eq!(hash_bytes, &expected);
    }

    #[test]
    fn test_zero_padding() {
        let (tls_key, account_key) = create_test_keys();
        let bytes = ReportDataV1::new(tls_key, account_key).to_bytes();

        let padding =
            &bytes[ReportDataV1::PUBLIC_KEYS_OFFSET + ReportDataV1::PUBLIC_KEYS_HASH_SIZE..];
        assert!(padding.iter().all(|&b| b == 0));
    }

    #[test]
    fn test_report_data_size() {
        let (tls_key, account_key) = create_test_keys();
        let bytes = ReportDataV1::new(tls_key, account_key);
        assert_eq!(bytes.to_bytes().len(), REPORT_DATA_SIZE);
    }
}
